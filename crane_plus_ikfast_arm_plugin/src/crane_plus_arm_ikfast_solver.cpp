/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-04-19 14:31:05.672872
/// Generated using solver translationdirection5d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKcos(j[1]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[1]);
x6=IKsin(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((2.0e-7)*x4);
x11=((0.0802)*x3);
x12=((0.0802)*x4);
x13=((1.5e-7)*x3);
x14=((1.0)*x4);
x15=((2.0e-7)*x3);
x16=((1.5e-7)*x4);
x17=((1.0)*x3);
x18=((0.094)*x4);
x19=((0.094)*x3);
x20=((1.0)*x0);
x21=(x2*x7);
x22=(x5*x7);
x23=(x0*x5);
x24=(x2*x4);
x25=(x0*x2);
IkReal x26=((1.0)*x23);
IkReal x27=((1.0)*x25);
eetrans[0]=((-0.0163)+(((2.0e-8)*x7))+((x19*x25))+((x1*((((x16*x25))+((x13*x23))))))+((x6*((((x16*x23))+(((-1.0)*x13*x27))))))+(((-5.0e-8)*x25))+(((-1.0)*x18*x26))+(((-1.0)*x10*x27))+((x6*((((x11*x23))+((x12*x25))))))+((x1*((((x11*x25))+(((-1.0)*x12*x26))))))+(((-1.0)*x15*x26))+(((-0.083)*x23)));
IkReal x28=((1.0)*x22);
IkReal x29=((1.0)*x21);
eetrans[1]=(((x6*((((x11*x22))+((x12*x21))))))+(((-2.0e-8)*x0))+((x19*x21))+((x1*((((x16*x21))+((x13*x22))))))+(((-5.0e-8)*x21))+(((-1.0)*x18*x28))+(((-1.0)*x10*x29))+(((-1.0)*x15*x28))+((x6*((((x16*x22))+(((-1.0)*x13*x29))))))+((x1*((((x11*x21))+(((-1.0)*x12*x28))))))+(((-0.083)*x22)));
IkReal x30=((1.0)*x2);
IkReal x31=((1.0)*x5);
eetrans[2]=((0.0715)+((x18*x2))+((x6*(((((-1.0)*x11*x30))+((x12*x5))))))+((x1*((((x16*x5))+(((-1.0)*x13*x30))))))+((x19*x5))+(((-1.0)*x10*x31))+((x6*(((((-1.0)*x16*x30))+(((-1.0)*x13*x31))))))+(((0.083)*x2))+(((-5.0e-8)*x5))+((x1*((((x11*x5))+((x12*x2))))))+((x15*x2)));
eerot[0]=(((x7*x9))+((x8*((((x1*(((((-1.0)*x14*x23))+((x17*x25))))))+((x6*((((x14*x25))+((x17*x23)))))))))));
eerot[1]=(((x8*((((x1*(((((-1.0)*x14*x22))+((x17*x21))))))+((x6*((((x14*x21))+((x17*x22))))))))))+(((-1.0)*x20*x9)));
eerot[2]=(x8*((((x6*((((x14*x5))+(((-1.0)*x17*x2))))))+((x1*((((x14*x2))+((x17*x5)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((0.0163)+px);
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.0715)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x34 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x34.valid){
continue;
}
IkReal x32=((1.0)*(x34.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x35=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x35.valid){
continue;
}
if( (((2.0e-8)*(x35.value))) < -1-IKFAST_SINCOS_THRESH || (((2.0e-8)*(x35.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x33=IKasin(((2.0e-8)*(x35.value)));
j0array[0]=((((-1.0)*x32))+x33);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x33))+(((-1.0)*x32)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x36=py*py;
IkReal x37=px*px;
IkReal x38=pz*pz;
IkReal x39=((0.0248969599999877)*r02);
IkReal x40=((3.32309226927411e-9)*r02);
IkReal x41=((4.70783042395558e-9)*r02);
IkReal x42=((0.00631103999999215)*r02);
IkReal x43=(cj0*r00);
IkReal x44=((0.16599999999991)*pz);
IkReal x45=(pz*r02);
IkReal x46=(r01*sj0);
IkReal x47=(px*r00);
IkReal x48=((2.51620947631092e-7)*pz);
IkReal x49=((2.0)*pz);
IkReal x50=(py*sj0);
IkReal x51=((8.0e-8)*px);
IkReal x52=(r02*sj0);
IkReal x53=(r00*sj0);
IkReal x54=(py*r01);
IkReal x55=(py*r00);
IkReal x56=((4.0)*pz);
IkReal x57=(cj0*px);
IkReal x58=((4.51620947631092e-7)*pz);
IkReal x59=(cj0*r01);
IkReal x60=((0.16600000000009)*pz);
IkReal x61=((4.0e-8)*px);
IkReal x62=((7.08000000000181e-9)*x59);
IkReal x63=((0.35400000000009)*x47);
IkReal x64=((0.35400000000009)*x45);
IkReal x65=((0.35400000000009)*x54);
IkReal x66=((7.08000000000181e-9)*x53);
IkReal x67=((5.58769077307259e-8)*x46);
IkReal x68=((5.58769077307259e-8)*x43);
IkReal x69=(r01*x61);
IkReal x70=((2.96758104737816e-15)*x53);
IkReal x71=((0.00448503999998729)*x46);
IkReal x72=((1.48379052368908e-7)*x54);
IkReal x73=((1.48379052368908e-7)*x45);
IkReal x74=((1.48379052368908e-7)*x47);
IkReal x75=((0.00448503999998729)*x43);
IkReal x76=((2.96758104737816e-15)*x59);
IkReal x77=((4.0e-8)*x55);
IkReal x78=((1.03241895262184e-15)*x53);
IkReal x79=((0.00448504000000715)*x46);
IkReal x80=((5.16209476310919e-8)*x54);
IkReal x81=((5.16209476310919e-8)*x45);
IkReal x82=((5.16209476310919e-8)*x47);
IkReal x83=((1.03241895262184e-15)*x59);
IkReal x84=((0.00448504000000715)*x43);
IkReal x85=(r02*x38);
IkReal x86=((8.0e-8)*x55);
IkReal x87=(r01*x51);
IkReal x88=((0.0220000000000905)*x47);
IkReal x89=((0.0220000000000905)*x54);
IkReal x90=(r02*x36);
IkReal x91=((0.0220000000000905)*x45);
IkReal x92=(r02*x37);
IkReal x93=((4.4000000000181e-10)*x59);
IkReal x94=((2.12921695760444e-8)*x46);
IkReal x95=((2.12921695760444e-8)*x43);
IkReal x96=((4.4000000000181e-10)*x53);
IkReal x97=(r02*x57);
IkReal x98=((1.0)*x36);
IkReal x99=((1.0)*x38);
IkReal x100=((2.0)*x37);
IkReal x101=(pz*x59);
IkReal x102=((2.0)*x36);
IkReal x103=((1.0)*x37);
IkReal x104=((2.0)*x38);
IkReal x105=(cj0*py*r02);
IkReal x106=((4.0e-8)*x101);
IkReal x107=(x47*x49);
IkReal x108=((4.51620947631092e-7)*x97);
IkReal x109=((4.51620947631092e-7)*r02*x50);
IkReal x110=(x49*x54);
IkReal x111=(x52*x61);
IkReal x112=((4.0e-8)*pz*x53);
IkReal x113=((4.0e-8)*x105);
IkReal x114=(x46*x58);
IkReal x115=(x43*x58);
IkReal x116=((0.16599999999991)*r02*x50);
IkReal x117=((0.16599999999991)*x97);
IkReal x118=(x43*x44);
IkReal x119=(x44*x46);
IkReal x120=(x38*x46);
IkReal x121=(x37*x46);
IkReal x122=(x36*x43);
IkReal x123=(x38*x43);
IkReal x124=((8.0e-8)*pz*x53);
IkReal x125=((8.0e-8)*x105);
IkReal x126=((2.0)*x90);
IkReal x127=((2.0)*x92);
IkReal x128=(x54*x56);
IkReal x129=((8.0e-8)*x101);
IkReal x130=((2.0)*x85);
IkReal x131=(x47*x56);
IkReal x132=(x51*x52);
IkReal x133=(x37*x43);
IkReal x134=((0.16600000000009)*x97);
IkReal x135=((0.16600000000009)*r02*x50);
IkReal x136=(x36*x46);
IkReal x137=(x43*x60);
IkReal x138=(x46*x60);
IkReal x139=((1.0)*x90);
IkReal x140=((1.0)*x92);
IkReal x141=((2.51620947631092e-7)*r02*x50);
IkReal x142=((2.51620947631092e-7)*x97);
IkReal x143=((1.0)*x85);
IkReal x144=(x43*x48);
IkReal x145=(x46*x48);
IkReal x146=((2.0)*x45*x50);
IkReal x147=((2.0)*x47*x50);
IkReal x148=((2.0)*x54*x57);
IkReal x149=((2.0)*x45*x57);
IkReal x150=(x103*x43);
IkReal x151=(x46*x98);
IkReal x152=(x103*x46);
IkReal x153=(x43*x99);
IkReal x154=(x43*x98);
IkReal x155=(x46*x99);
IkReal x156=(x104*x46);
IkReal x157=(x100*x46);
IkReal x158=(x102*x43);
IkReal x159=(x104*x43);
IkReal x160=((4.0)*x47*x50);
IkReal x161=((4.0)*x54*x57);
IkReal x162=((4.0)*x45*x57);
IkReal x163=(x102*x46);
IkReal x164=(x100*x43);
IkReal x165=((4.0)*x45*x50);
IkReal x166=(x95+x94);
IkReal x167=(x67+x68);
IkReal x168=(x136+x133);
IkReal x169=(x77+x79+x84);
IkReal x170=(x151+x150);
IkReal x171=(x135+x134+x78);
IkReal x172=(x115+x114+x66);
IkReal x173=(x77+x75+x71+x40);
IkReal x174=(x144+x145+x96);
IkReal x175=(x117+x116+x70);
IkReal x176=(x113+x112+x90+x92);
IkReal x177=(x111+x110+x106+x107);
IkReal x178=(x140+x139+x113+x112);
IkReal x179=(x122+x123+x120+x121);
IkReal x180=(x126+x127+x124+x125);
IkReal x181=(x141+x142+x88+x89+x91+x93);
IkReal x182=(x108+x109+x62+x63+x64+x65);
IkReal x183=(x119+x118+x76+x74+x73+x72);
IkReal x184=(x155+x154+x153+x152);
IkReal x185=(x137+x138+x82+x83+x80+x81);
IkReal x186=(x131+x130+x132+x128+x129);
IkReal x187=(x157+x156+x159+x158+x86);
IkReal x188=(x146+x147+x148+x149+x69);
IkReal x189=(x188+x41);
IkReal x190=(x162+x163+x160+x161+x164+x165+x87);
IkReal x191=((((-6.64618453854822e-9)*x46))+(((-6.64618453854822e-9)*x43))+(((0.00897007999997458)*r02))+(((-1.0)*x186))+x180);
IkReal x192=((((0.0089700800000143)*r02))+(((-1.0)*x186))+x180+(((9.41566084791117e-9)*x43))+(((9.41566084791117e-9)*x46)));
IkReal x193=((((1.11753815461452e-7)*r02))+(((-1.0)*x187))+x190+(((0.0497939199999754)*x46))+(((0.0497939199999754)*x43)));
IkReal x194=((((0.0126220799999843)*x46))+(((0.0126220799999843)*x43))+(((-1.0)*x190))+x187+(((4.25843391520888e-8)*r02)));
IkReal x195=((((-1.0)*x143))+(((-1.0)*x177))+(((-1.0)*x172))+(((-1.0)*x39))+x176+x167+x182);
IkReal x196=((((-1.0)*x143))+(((-1.0)*x166))+(((-1.0)*x177))+(((-1.0)*x174))+x176+x181+x42);
IkReal x197=((((-1.0)*x167))+(((-1.0)*x178))+(((-1.0)*x172))+x177+x182+x39+x85);
IkReal x198=((((-1.0)*x178))+(((-1.0)*x174))+(((-1.0)*x42))+x177+x166+x181+x85);
IkReal x199=((((-1.0)*x170))+(((-1.0)*x183))+(((-1.0)*x188))+x179+x173+x175);
IkReal x200=((((-1.0)*x170))+(((-1.0)*x185))+(((-1.0)*x189))+x179+x171+x169);
IkReal x201=((((-1.0)*x173))+(((-1.0)*x184))+(((-1.0)*x183))+x175+x168+x188);
IkReal x202=((((-1.0)*x169))+(((-1.0)*x185))+(((-1.0)*x184))+x171+x168+x189);
IkReal gconst0=x195;
IkReal gconst1=x193;
IkReal gconst2=x197;
IkReal gconst3=x199;
IkReal gconst4=x191;
IkReal gconst5=x201;
IkReal gconst6=x195;
IkReal gconst7=x193;
IkReal gconst8=x197;
IkReal gconst9=x199;
IkReal gconst10=x191;
IkReal gconst11=x201;
IkReal gconst12=x200;
IkReal gconst13=x192;
IkReal gconst14=x202;
IkReal gconst15=x198;
IkReal gconst16=x194;
IkReal gconst17=x196;
IkReal gconst18=x200;
IkReal gconst19=x192;
IkReal gconst20=x202;
IkReal gconst21=x198;
IkReal gconst22=x194;
IkReal gconst23=x196;
IkReal x203=((1.0)*gconst21);
IkReal x204=(gconst14*gconst20);
IkReal x205=(gconst13*gconst17);
IkReal x206=(gconst14*gconst4);
IkReal x207=(gconst18*gconst22);
IkReal x208=(gconst20*gconst21);
IkReal x209=(gconst0*gconst17);
IkReal x210=(gconst12*gconst5);
IkReal x211=(gconst21*gconst8);
IkReal x212=((1.0)*gconst9);
IkReal x213=(gconst15*gconst2);
IkReal x214=(gconst16*gconst2);
IkReal x215=(gconst10*gconst18);
IkReal x216=(gconst1*gconst17);
IkReal x217=(gconst2*gconst3);
IkReal x218=(gconst2*gconst4);
IkReal x219=(gconst19*gconst21);
IkReal x220=(gconst19*gconst5);
IkReal x221=(gconst11*gconst6);
IkReal x222=(gconst12*gconst17);
IkReal x223=(gconst8*gconst9);
IkReal x224=(gconst7*gconst9);
IkReal x225=(gconst14*gconst3);
IkReal x226=(gconst14*gconst15);
IkReal x227=(gconst23*gconst6);
IkReal x228=(gconst14*gconst16);
IkReal x229=(gconst10*gconst6);
IkReal x230=(gconst1*gconst5);
IkReal x231=(gconst18*gconst23);
IkReal x232=(gconst20*gconst9);
IkReal x233=(gconst13*gconst5);
IkReal x234=(gconst11*gconst18);
IkReal x235=(gconst21*gconst7);
IkReal x236=(gconst19*gconst9);
IkReal x237=(gconst0*gconst5);
IkReal x238=(gconst22*gconst6);
IkReal x239=((1.0)*x238);
IkReal x240=(gconst2*x236);
IkReal x241=(gconst7*x216);
IkReal x242=((1.0)*x237);
IkReal x243=(gconst23*x242);
op[0]=(((x205*x207))+(((-1.0)*gconst15*x203*x204))+((x208*x222))+((x226*x231))+((x219*x228))+(((-1.0)*x207*x228))+(((-1.0)*x222*x231))+(((-1.0)*gconst19*x203*x205)));
op[1]=((((-1.0)*gconst7*x203*x205))+(((-1.0)*gconst15*x204*x212))+((x205*x238))+(((-1.0)*gconst3*x203*x204))+(((-1.0)*x210*x231))+((x214*x219))+(((-1.0)*gconst19*x205*x212))+((x206*x219))+(((-1.0)*x215*x228))+((x228*x235))+((x228*x236))+(((-1.0)*x206*x207))+((x208*x210))+((x207*x216))+((x226*x234))+((x205*x215))+(((-1.0)*x209*x231))+(((-1.0)*gconst8*x203*x226))+((x222*x232))+((x225*x231))+(((-1.0)*x222*x227))+((x213*x231))+(((-1.0)*gconst13*x203*x220))+(((-1.0)*x207*x214))+((x226*x227))+(((-1.0)*gconst20*x203*x213))+((x208*x209))+(((-1.0)*x222*x234))+(((-1.0)*x228*x239))+((x207*x233))+(((-1.0)*gconst19*x203*x216))+((x211*x222)));
op[2]=(((x224*x228))+(((-1.0)*gconst20*x212*x213))+((x218*x219))+((x205*x229))+(((-1.0)*gconst3*x204*x212))+((x225*x227))+(((-1.0)*x210*x234))+(((-1.0)*x214*x239))+((x210*x211))+((x222*x223))+(((-1.0)*gconst7*x205*x212))+(((-1.0)*x231*x242))+((x217*x231))+(((-1.0)*gconst8*x203*x213))+(((-1.0)*x228*x229))+((x233*x238))+((x215*x216))+((x213*x227))+(((-1.0)*x214*x215))+((x209*x211))+(((-1.0)*x210*x227))+(((-1.0)*x203*x241))+(((-1.0)*x209*x234))+(((-1.0)*gconst8*x203*x225))+(((-1.0)*gconst19*x212*x216))+(((-1.0)*x206*x239))+(((-1.0)*x206*x215))+((x225*x234))+((x213*x234))+(((-1.0)*gconst13*x212*x220))+(((-1.0)*gconst8*x212*x226))+(((-1.0)*gconst1*x203*x220))+((x214*x235))+((x214*x236))+(((-1.0)*x207*x218))+((x221*x226))+(((-1.0)*gconst20*x203*x217))+((x215*x233))+((x209*x232))+((x216*x238))+((x208*x237))+((x207*x230))+(((-1.0)*x209*x227))+(((-1.0)*x221*x222))+((x210*x232))+(((-1.0)*gconst7*x203*x233))+((x206*x236))+((x206*x235)));
op[3]=(((x211*x237))+(((-1.0)*x215*x218))+(((-1.0)*gconst20*x212*x217))+((x210*x223))+(((-1.0)*gconst8*x212*x213))+((x206*x224))+((x229*x233))+((x216*x229))+(((-1.0)*x206*x229))+(((-1.0)*gconst1*x212*x220))+((x232*x237))+((x209*x223))+((x217*x234))+(((-1.0)*gconst8*x203*x217))+(((-1.0)*x212*x241))+((x214*x224))+((x218*x236))+((x218*x235))+(((-1.0)*x234*x242))+((x213*x221))+((x230*x238))+(((-1.0)*x210*x221))+(((-1.0)*gconst8*x212*x225))+(((-1.0)*gconst7*x212*x233))+((x217*x227))+((x221*x225))+((x215*x230))+(((-1.0)*x218*x239))+(((-1.0)*x227*x242))+(((-1.0)*x209*x221))+(((-1.0)*gconst7*x203*x230))+(((-1.0)*x214*x229)));
op[4]=((((-1.0)*gconst8*x212*x217))+((x229*x230))+((x218*x224))+(((-1.0)*x218*x229))+(((-1.0)*gconst7*x212*x230))+((x217*x221))+(((-1.0)*x221*x242))+((x223*x237)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x244=sj2*sj2;
IkReal x245=cj2*cj2;
IkReal x246=sj2*sj2*sj2;
IkReal x247=cj2*cj2*cj2;
IkReal x248=((0.3208)*pz);
IkReal x249=(r01*sj0);
IkReal x250=(cj0*r00);
IkReal x251=((0.02572816000009)*r02);
IkReal x252=((1.2e-6)*pz);
IkReal x253=((2.4e-6)*pz);
IkReal x254=(py*sj0);
IkReal x255=(cj4*x244);
IkReal x256=((0.10291264000036)*x244);
IkReal x257=(cj4*x245);
IkReal x258=(cj4*x246);
IkReal x259=((0.10291264000036)*x245);
IkReal x260=((0.6416)*x254);
IkReal x261=((1.2832)*cj0*px);
IkReal x262=((0.05145632000018)*x245);
IkReal x263=((0.05145632000018)*x244);
IkReal x264=(cj4*x247);
IkReal x265=((6.0e-7)*cj0*px);
IkReal x266=(x244*x251);
IkReal x267=((3.6168e-7)*x258);
IkReal x268=((0.07987919999991)*x257);
IkReal x269=(x245*x251);
IkReal x270=((0.07987919999991)*x255);
IkReal x271=((0.09046559999964)*x264);
IkReal x272=((0.02662639999997)*x255);
IkReal x273=((0.03015519999988)*x264);
IkReal x274=((1.2056e-7)*x258);
IkReal x275=((0.02662639999997)*x257);
IkReal x276=((0.6416)*cj0*cj4*px);
IkReal x277=(x248*x255);
IkReal x278=(x248*x257);
IkReal x279=((0.09046559999964)*cj2*x255);
IkReal x280=((3.6168e-7)*sj2*x257);
IkReal x281=((0.03015519999988)*cj2*x255);
IkReal x282=((1.2056e-7)*sj2*x257);
IkReal x283=((6.0e-7)*x254*x257);
IkReal x284=(x257*x265);
IkReal x285=(x255*x265);
IkReal x286=((6.0e-7)*x254*x255);
IkReal x287=(x266+x269);
IkReal x288=(x274+x275+x272+x273+x282+x281);
IkReal x289=(x267+x268+x270+x271+x279+x280);
IkReal x290=(x277+x278+x286+x285+x284+x283);
IkReal x291=((((-1.0)*x252*x257))+(((-1.0)*x252*x255))+(((0.6416)*cj0*px*x257))+(((0.6416)*cj0*px*x255))+(((-1.0)*x249*x262))+(((-1.0)*x249*x263))+(((-1.0)*x250*x263))+(((-1.0)*x250*x262))+((x255*x260))+((x257*x260)));
op[0]=(x290+x288+(((-1.0)*x287)));
op[1]=x291;
op[2]=(x290+x289+(((-1.0)*x287)));
op[3]=((((-1.0)*x250*x256))+(((-1.0)*x250*x259))+(((1.2832)*x254*x255))+(((1.2832)*x254*x257))+((x255*x261))+(((-1.0)*x249*x259))+(((-1.0)*x249*x256))+((x257*x261))+(((-1.0)*x253*x255))+(((-1.0)*x253*x257)));
op[4]=((((-1.0)*x290))+x289+x287);
op[5]=x291;
op[6]=((((-1.0)*x290))+x288+x287);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

j1evalpoly[0]=((((htj1*htj1*htj1*htj1*htj1*htj1)*(((((0.3208)*cj0*cj4*px*(cj2*cj2)))+(((-6.0e-7)*cj4*pz*(cj2*cj2)))+(((-0.02572816000009)*r01*sj0*(sj2*sj2)))+(((-0.02572816000009)*cj0*r00*(sj2*sj2)))+(((-0.02572816000009)*cj0*r00*(cj2*cj2)))+(((0.03015519999988)*cj4*(sj2*sj2*sj2)))+(((0.3208)*cj0*cj4*px*(sj2*sj2)))+(((-6.584e-8)*cj4*(sj2*sj2)))+(((0.03015519999988)*cj4*sj2*(cj2*cj2)))+(((-6.0e-7)*cj4*pz*(sj2*sj2)))+(((-1.2056e-7)*cj2*cj4*(sj2*sj2)))+(((-0.02572816000009)*r01*sj0*(cj2*cj2)))+(((0.3208)*cj4*py*sj0*(cj2*cj2)))+(((-6.584e-8)*cj4*(cj2*cj2)))+(((0.3208)*cj4*py*sj0*(sj2*sj2)))+(((-1.2056e-7)*cj4*(cj2*cj2*cj2)))))))+(((0.02572816000009)*r01*sj0*(cj2*cj2)))+((htj1*(((((-0.6416)*cj4*pz*(sj2*sj2)))+(((0.05145632000018)*r02*(sj2*sj2)))+(((-0.6416)*cj4*pz*(cj2*cj2)))+(((0.05145632000018)*r02*(cj2*cj2)))+(((-1.2e-6)*cj4*py*sj0*(cj2*cj2)))+(((-1.2e-6)*cj4*py*sj0*(sj2*sj2)))+(((-1.2e-6)*cj0*cj4*px*(sj2*sj2)))+(((-1.2e-6)*cj0*cj4*px*(cj2*cj2)))))))+(((0.02572816000009)*cj0*r00*(cj2*cj2)))+(((6.0e-7)*cj4*pz*(sj2*sj2)))+(((-0.3208)*cj4*py*sj0*(sj2*sj2)))+(((-0.3208)*cj0*cj4*px*(sj2*sj2)))+(((0.03015519999988)*cj4*(sj2*sj2*sj2)))+(((htj1*htj1)*(((((0.02572816000009)*r01*sj0*(cj2*cj2)))+(((-3.6168e-7)*cj2*cj4*(sj2*sj2)))+(((0.09046559999964)*cj4*(sj2*sj2*sj2)))+(((0.02572816000009)*cj0*r00*(cj2*cj2)))+(((6.0e-7)*cj4*pz*(sj2*sj2)))+(((-0.3208)*cj4*py*sj0*(sj2*sj2)))+(((-0.3208)*cj0*cj4*px*(sj2*sj2)))+(((0.09046559999964)*cj4*sj2*(cj2*cj2)))+(((0.02572816000009)*cj0*r00*(sj2*sj2)))+(((-3.6168e-7)*cj4*(cj2*cj2*cj2)))+(((-1.9752e-7)*cj4*(cj2*cj2)))+(((0.02572816000009)*r01*sj0*(sj2*sj2)))+(((6.0e-7)*cj4*pz*(cj2*cj2)))+(((-0.3208)*cj4*py*sj0*(cj2*cj2)))+(((-0.3208)*cj0*cj4*px*(cj2*cj2)))+(((-1.9752e-7)*cj4*(sj2*sj2)))))))+(((-6.584e-8)*cj4*(sj2*sj2)))+(((0.03015519999988)*cj4*sj2*(cj2*cj2)))+(((0.02572816000009)*cj0*r00*(sj2*sj2)))+(((-1.2056e-7)*cj2*cj4*(sj2*sj2)))+(((-6.584e-8)*cj4*(cj2*cj2)))+(((htj1*htj1*htj1)*(((((-2.4e-6)*cj4*py*sj0*(sj2*sj2)))+(((-2.4e-6)*cj0*cj4*px*(cj2*cj2)))+(((-2.4e-6)*cj4*py*sj0*(cj2*cj2)))+(((-1.2832)*cj4*pz*(sj2*sj2)))+(((-1.2832)*cj4*pz*(cj2*cj2)))+(((0.10291264000036)*r02*(cj2*cj2)))+(((-2.4e-6)*cj0*cj4*px*(sj2*sj2)))+(((0.10291264000036)*r02*(sj2*sj2)))))))+(((htj1*htj1*htj1*htj1*htj1)*(((((-0.6416)*cj4*pz*(sj2*sj2)))+(((0.05145632000018)*r02*(sj2*sj2)))+(((-0.6416)*cj4*pz*(cj2*cj2)))+(((0.05145632000018)*r02*(cj2*cj2)))+(((-1.2e-6)*cj4*py*sj0*(cj2*cj2)))+(((-1.2e-6)*cj4*py*sj0*(sj2*sj2)))+(((-1.2e-6)*cj0*cj4*px*(sj2*sj2)))+(((-1.2e-6)*cj0*cj4*px*(cj2*cj2)))))))+(((-1.2056e-7)*cj4*(cj2*cj2*cj2)))+(((0.02572816000009)*r01*sj0*(sj2*sj2)))+(((6.0e-7)*cj4*pz*(cj2*cj2)))+(((-0.3208)*cj4*py*sj0*(cj2*cj2)))+(((htj1*htj1*htj1*htj1)*(((((0.3208)*cj0*cj4*px*(cj2*cj2)))+(((-3.6168e-7)*cj2*cj4*(sj2*sj2)))+(((-6.0e-7)*cj4*pz*(cj2*cj2)))+(((-0.02572816000009)*r01*sj0*(sj2*sj2)))+(((0.09046559999964)*cj4*(sj2*sj2*sj2)))+(((-0.02572816000009)*cj0*r00*(sj2*sj2)))+(((-0.02572816000009)*cj0*r00*(cj2*cj2)))+(((0.3208)*cj0*cj4*px*(sj2*sj2)))+(((0.09046559999964)*cj4*sj2*(cj2*cj2)))+(((-6.0e-7)*cj4*pz*(sj2*sj2)))+(((-0.02572816000009)*r01*sj0*(cj2*cj2)))+(((0.3208)*cj4*py*sj0*(cj2*cj2)))+(((-3.6168e-7)*cj4*(cj2*cj2*cj2)))+(((0.3208)*cj4*py*sj0*(sj2*sj2)))+(((-1.9752e-7)*cj4*(cj2*cj2)))+(((-1.9752e-7)*cj4*(sj2*sj2)))))))+(((-0.3208)*cj0*cj4*px*(cj2*cj2))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3eval[2];
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x292=((2.33207504927636e-5)*cj1);
IkReal x293=(pz*sj2);
IkReal x294=(cj2*sj1);
IkReal x295=(py*sj0);
IkReal x296=(sj1*sj2);
IkReal x297=(cj2*pz);
IkReal x298=((12.4688279301309)*cj1);
IkReal x299=(cj0*px);
IkReal x300=((2.33207504927636e-5)*x299);
if( IKabs(((4.68591613234597e-6)+(((1.0349127181997)*sj2))+(((-1.0)*x293*x298))+((x294*x300))+((cj2*x295*x298))+(((-2.33207504927636e-5)*sj1*x293))+(((12.4688279301309)*pz*x294))+(((12.4688279301309)*x295*x296))+(((-1.0)*sj2*x292*x295))+(((-1.0)*sj2*x292*x299))+(((12.4688279301309)*x296*x299))+((cj2*x298*x299))+(((2.33207504927636e-5)*x294*x295))+(((-1.0)*x292*x297))+(((2.55906368740593e-6)*cj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.17206982542764)+(((12.4688279301309)*sj1*x293))+(((2.55906368740593e-6)*sj2))+((sj2*x298*x299))+((sj2*x295*x298))+(((-12.4688279301309)*x294*x295))+(((-12.4688279301309)*x294*x299))+((cj2*x292*x295))+((cj2*x292*x299))+((x297*x298))+(((2.33207504927636e-5)*pz*x294))+((x296*x300))+(((-1.0349127181997)*cj2))+(((2.33207504927636e-5)*x295*x296))+(((-1.0)*x292*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.68591613234597e-6)+(((1.0349127181997)*sj2))+(((-1.0)*x293*x298))+((x294*x300))+((cj2*x295*x298))+(((-2.33207504927636e-5)*sj1*x293))+(((12.4688279301309)*pz*x294))+(((12.4688279301309)*x295*x296))+(((-1.0)*sj2*x292*x295))+(((-1.0)*sj2*x292*x299))+(((12.4688279301309)*x296*x299))+((cj2*x298*x299))+(((2.33207504927636e-5)*x294*x295))+(((-1.0)*x292*x297))+(((2.55906368740593e-6)*cj2))))+IKsqr(((-1.17206982542764)+(((12.4688279301309)*sj1*x293))+(((2.55906368740593e-6)*sj2))+((sj2*x298*x299))+((sj2*x295*x298))+(((-12.4688279301309)*x294*x295))+(((-12.4688279301309)*x294*x299))+((cj2*x292*x295))+((cj2*x292*x299))+((x297*x298))+(((2.33207504927636e-5)*pz*x294))+((x296*x300))+(((-1.0349127181997)*cj2))+(((2.33207504927636e-5)*x295*x296))+(((-1.0)*x292*x293))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((4.68591613234597e-6)+(((1.0349127181997)*sj2))+(((-1.0)*x293*x298))+((x294*x300))+((cj2*x295*x298))+(((-2.33207504927636e-5)*sj1*x293))+(((12.4688279301309)*pz*x294))+(((12.4688279301309)*x295*x296))+(((-1.0)*sj2*x292*x295))+(((-1.0)*sj2*x292*x299))+(((12.4688279301309)*x296*x299))+((cj2*x298*x299))+(((2.33207504927636e-5)*x294*x295))+(((-1.0)*x292*x297))+(((2.55906368740593e-6)*cj2))), ((-1.17206982542764)+(((12.4688279301309)*sj1*x293))+(((2.55906368740593e-6)*sj2))+((sj2*x298*x299))+((sj2*x295*x298))+(((-12.4688279301309)*x294*x295))+(((-12.4688279301309)*x294*x299))+((cj2*x292*x295))+((cj2*x292*x299))+((x297*x298))+(((2.33207504927636e-5)*pz*x294))+((x296*x300))+(((-1.0349127181997)*cj2))+(((2.33207504927636e-5)*x295*x296))+(((-1.0)*x292*x293))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x301=IKsin(j3);
IkReal x302=IKcos(j3);
IkReal x303=((2.0e-7)*cj2);
IkReal x304=((0.094)*sj2);
IkReal x305=((2.0e-7)*sj2);
IkReal x306=((0.094)*cj2);
IkReal x307=pz*pz;
IkReal x308=py*py;
IkReal x309=px*px;
IkReal x310=(py*sj1);
IkReal x311=((8.3e-9)*cj1);
IkReal x312=(cj0*r00);
IkReal x313=((1.0e-7)*r00);
IkReal x314=(pz*r01);
IkReal x315=((1.0e-7)*sj1);
IkReal x316=(r02*sj1);
IkReal x317=((1.0)*px);
IkReal x318=(r01*sj0);
IkReal x319=((0.006888999999995)*sj1);
IkReal x320=(cj0*r01);
IkReal x321=((0.166)*px);
IkReal x322=(cj0*r02);
IkReal x323=(cj1*r01);
IkReal x324=(px*r00);
IkReal x325=(pz*r02);
IkReal x326=((0.166)*r00);
IkReal x327=(r01*sj1);
IkReal x328=((1.0e-7)*cj0);
IkReal x329=(cj1*r02);
IkReal x330=(r00*sj0);
IkReal x331=((5.0e-8)*cj1);
IkReal x332=((1.0e-7)*px);
IkReal x333=((1.0e-7)*sj0);
IkReal x334=((0.166)*sj0);
IkReal x335=(px*sj0);
IkReal x336=(cj0*sj1);
IkReal x337=((5.0e-8)*sj1);
IkReal x338=(cj1*py);
IkReal x339=(cj0*px);
IkReal x340=((2.0)*pz);
IkReal x341=(py*r01);
IkReal x342=(cj1*pz);
IkReal x343=(cj0*cj1);
IkReal x344=(cj1*px);
IkReal x345=((2.0)*px);
IkReal x346=((8.3e-9)*sj1);
IkReal x347=(pz*sj1);
IkReal x348=((2.0)*sj0);
IkReal x349=((5.0e-15)*cj1);
IkReal x350=(py*r02);
IkReal x351=((0.006889)*cj1);
IkReal x352=((6.028e-8)*x301);
IkReal x353=((0.01507759999994)*x302);
IkReal x354=(r02*x311);
IkReal x355=((1.0e-7)*x341);
IkReal x356=((1.0e-7)*x325);
IkReal x357=(px*x313);
IkReal x358=(cj2*x301);
IkReal x359=(sj2*x302);
IkReal x360=(cj1*x308);
IkReal x361=(cj2*x302);
IkReal x362=(sj2*x301);
IkReal x363=((1.0)*x308);
IkReal x364=((1.0)*x307);
IkReal x365=(sj1*x309);
IkReal x366=((1.0)*x309);
IkReal x367=(cj1*x307);
IkReal x368=((1.5e-7)*x362);
IkReal x369=((0.0802)*x358);
IkReal x370=((0.0802)*x359);
IkReal x371=((1.5e-7)*x361);
IkReal x372=((0.0802)*x361);
IkReal x373=((1.5e-7)*x358);
IkReal x374=((1.5e-7)*x359);
IkReal x375=((0.0802)*x362);
IkReal x376=(x323*x332);
IkReal x377=(x318*x346);
IkReal x378=(x313*x338);
IkReal x379=(x312*x346);
IkReal x380=(x338*x348);
IkReal x381=(r02*x315*x335);
IkReal x382=(cj0*x314*x315);
IkReal x383=((1.0e-7)*x310*x322);
IkReal x384=(sj0*x313*x347);
IkReal x385=(x303+x368);
IkReal x386=(x306+x305+x372);
IkReal x387=(x375+x374+x373);
IkReal x388=(x304+x371+x370+x369);
IkReal x389=(x384+x383+x378);
IkReal x390=(x382+x381+x376);
IkReal x391=(x355+x357+x356+x379+x377);
evalcond[0]=((5.0e-8)+((cj1*x339))+x385+x347+(((-1.0)*x388))+((sj0*x338)));
evalcond[1]=((-0.083)+x387+x342+(((-1.0)*x317*x336))+(((-1.0)*x386))+(((-1.0)*sj0*x310)));
evalcond[2]=((0.0083790400000624)+(((-1.0)*x321*x336))+(((-1.0)*x310*x334))+(((-1.0)*x333*x338))+(((-1.0)*x366))+(((-1.0)*x364))+(((-1.0)*x363))+(((-1.0)*x352))+((py*x328))+x353+(((-1.0)*pz*x315))+(((-1.0)*sj0*x332))+(((0.166)*x342))+(((-1.0)*x328*x344)));
evalcond[3]=(((r00*x338))+(((-1.0)*sj0*x316*x317))+(((-1.0)*x318*x331))+((x310*x322))+(((-1.0)*x317*x323))+(((-5.0e-8)*x316))+x385+(((-1.0)*x388))+(((-1.0)*x314*x336))+(((5.0e-8)*x330))+(((-5.0e-8)*x320))+(((-1.0)*x312*x331))+((x330*x347)));
evalcond[4]=(((x314*x343))+(((-1.0)*x318*x337))+(((-1.0)*x317*x327))+(((-0.083)*x320))+x386+((x329*x335))+((r00*x310))+(((-1.0)*x322*x338))+(((-1.0)*x387))+(((5.0e-8)*x329))+(((-1.0)*x312*x337))+(((0.083)*x330))+(((-1.0)*x330*x342)));
evalcond[5]=((-0.0152680400000576)+(((-5.0e-15)*x316))+(((-1.0)*x390))+(((-1.0)*x391))+((sj0*x321*x329))+((x308*x320))+(((-1.0)*x321*x327))+((x310*x326))+(((-1.0)*x353))+(((-1.0)*sj0*x326*x342))+(((-1.0)*py*x318*x345))+(((-2.0)*x325*x335))+(((0.006889)*x330))+((py*x322*x340))+((x308*x330))+x352+x354+x389+(((-1.0)*x330*x366))+(((-0.166)*x322*x338))+(((-1.0)*x318*x349))+((py*x312*x345))+(((-1.0)*x312*x349))+(((-1.0)*x320*x366))+(((-1.0)*x320*x364))+((x307*x330))+(((-0.006889)*x320))+(((0.166)*x314*x343)));
evalcond[6]=(((x318*x351))+(((-1.0)*x391))+(((1.1228e-8)*x358))+(((1.1228e-8)*x359))+(((-5.0e-15)*x330))+(((-0.166)*pz*x312))+(((-2.8e-14)*cj2))+(((-1.0)*cj1*x312*x366))+(((-2.1e-14)*x362))+((x334*x350))+(((-1.0)*x320*x338*x345))+((x308*x316))+((x312*x367))+((x312*x360))+(((-1.0)*sj1*x324*x340))+((x312*x351))+(((-1.0)*x325*x380))+(((-1.0)*x318*x360))+x354+x390+((x309*x316))+(((-2.0)*x310*x314))+((x318*x367))+((cj1*x309*x318))+(((-1.0)*x389))+(((1.316e-8)*sj2))+(((-1.0)*x322*x340*x344))+(((-1.0)*x314*x334))+(((0.006889)*x316))+(((5.0e-15)*x320))+(((2.1e-14)*x361))+(((-1.0)*x316*x364))+((x321*x322))+(((-1.0)*x324*x380)));
evalcond[7]=(((x316*x339*x340))+((x310*x313))+(((1.316e-8)*cj2))+(((-2.0)*x314*x338))+((x312*x319))+(((1.1228e-8)*x361))+((x308*x329))+((r00*x321))+(((-1.0)*sj0*x313*x342))+(((8.3e-9)*x316))+(((-1.0)*sj1*x318*x364))+(((-2.1e-14)*x358))+(((-2.1e-14)*x359))+(((-1.1228e-8)*x362))+(((-8.3e-9)*x320))+((sj0*x329*x332))+((x312*x365))+((x310*x320*x345))+(((-1.0)*x318*x365))+(((8.3e-9)*x330))+(((-1.0)*cj1*x324*x340))+(((-1.0)*px*r01*x315))+(((2.8e-14)*sj2))+((x311*x312))+((x311*x318))+(((-1.0e-7)*x322*x338))+(((0.166)*x325))+(((-1.0)*x329*x364))+(((-1.0)*sj1*x312*x364))+(((-1.0)*sj1*x312*x363))+((x309*x329))+(((-1.0e-7)*pz*x312))+(((-0.006888999999995)*x329))+((x310*x324*x348))+(((-1.0)*x314*x333))+((x333*x350))+((x322*x332))+((x318*x319))+(((0.166)*x341))+((x310*x325*x348))+((cj1*x314*x328))+((sj1*x308*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x392=((2.33207504927636e-5)*cj1);
IkReal x393=(pz*sj2);
IkReal x394=(cj2*sj1);
IkReal x395=(py*sj0);
IkReal x396=(sj1*sj2);
IkReal x397=(cj2*pz);
IkReal x398=((12.4688279301309)*cj1);
IkReal x399=(cj0*px);
IkReal x400=((2.33207504927636e-5)*x399);
if( IKabs(((4.68591613234597e-6)+((cj2*x398*x399))+(((1.0349127181997)*sj2))+(((12.4688279301309)*pz*x394))+(((-1.0)*sj2*x392*x399))+(((-1.0)*sj2*x392*x395))+((cj2*x395*x398))+(((-2.33207504927636e-5)*sj1*x393))+(((12.4688279301309)*x395*x396))+((x394*x400))+(((2.33207504927636e-5)*x394*x395))+(((12.4688279301309)*x396*x399))+(((-1.0)*x393*x398))+(((-1.0)*x392*x397))+(((2.55906368740593e-6)*cj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.17206982542764)+(((2.55906368740593e-6)*sj2))+((cj2*x392*x399))+((cj2*x392*x395))+((sj2*x398*x399))+((x397*x398))+((sj2*x395*x398))+(((-1.0349127181997)*cj2))+(((2.33207504927636e-5)*x395*x396))+(((2.33207504927636e-5)*pz*x394))+(((-12.4688279301309)*x394*x395))+(((-12.4688279301309)*x394*x399))+(((12.4688279301309)*sj1*x393))+(((-1.0)*x392*x393))+((x396*x400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.68591613234597e-6)+((cj2*x398*x399))+(((1.0349127181997)*sj2))+(((12.4688279301309)*pz*x394))+(((-1.0)*sj2*x392*x399))+(((-1.0)*sj2*x392*x395))+((cj2*x395*x398))+(((-2.33207504927636e-5)*sj1*x393))+(((12.4688279301309)*x395*x396))+((x394*x400))+(((2.33207504927636e-5)*x394*x395))+(((12.4688279301309)*x396*x399))+(((-1.0)*x393*x398))+(((-1.0)*x392*x397))+(((2.55906368740593e-6)*cj2))))+IKsqr(((-1.17206982542764)+(((2.55906368740593e-6)*sj2))+((cj2*x392*x399))+((cj2*x392*x395))+((sj2*x398*x399))+((x397*x398))+((sj2*x395*x398))+(((-1.0349127181997)*cj2))+(((2.33207504927636e-5)*x395*x396))+(((2.33207504927636e-5)*pz*x394))+(((-12.4688279301309)*x394*x395))+(((-12.4688279301309)*x394*x399))+(((12.4688279301309)*sj1*x393))+(((-1.0)*x392*x393))+((x396*x400))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((4.68591613234597e-6)+((cj2*x398*x399))+(((1.0349127181997)*sj2))+(((12.4688279301309)*pz*x394))+(((-1.0)*sj2*x392*x399))+(((-1.0)*sj2*x392*x395))+((cj2*x395*x398))+(((-2.33207504927636e-5)*sj1*x393))+(((12.4688279301309)*x395*x396))+((x394*x400))+(((2.33207504927636e-5)*x394*x395))+(((12.4688279301309)*x396*x399))+(((-1.0)*x393*x398))+(((-1.0)*x392*x397))+(((2.55906368740593e-6)*cj2))), ((-1.17206982542764)+(((2.55906368740593e-6)*sj2))+((cj2*x392*x399))+((cj2*x392*x395))+((sj2*x398*x399))+((x397*x398))+((sj2*x395*x398))+(((-1.0349127181997)*cj2))+(((2.33207504927636e-5)*x395*x396))+(((2.33207504927636e-5)*pz*x394))+(((-12.4688279301309)*x394*x395))+(((-12.4688279301309)*x394*x399))+(((12.4688279301309)*sj1*x393))+(((-1.0)*x392*x393))+((x396*x400))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x401=IKsin(j3);
IkReal x402=IKcos(j3);
IkReal x403=((0.094)*sj2);
IkReal x404=((2.0e-7)*cj2);
IkReal x405=((2.0e-7)*sj2);
IkReal x406=((0.094)*cj2);
IkReal x407=pz*pz;
IkReal x408=py*py;
IkReal x409=px*px;
IkReal x410=(py*sj1);
IkReal x411=((8.3e-9)*cj1);
IkReal x412=(cj0*r00);
IkReal x413=((1.0e-7)*r00);
IkReal x414=(pz*r01);
IkReal x415=((1.0e-7)*sj1);
IkReal x416=(r02*sj1);
IkReal x417=((1.0)*px);
IkReal x418=(r01*sj0);
IkReal x419=((0.006888999999995)*sj1);
IkReal x420=(cj0*r01);
IkReal x421=((0.166)*px);
IkReal x422=(cj0*r02);
IkReal x423=(cj1*r01);
IkReal x424=(r00*sj0);
IkReal x425=(cj1*py);
IkReal x426=((2.0)*px);
IkReal x427=(r01*sj1);
IkReal x428=((1.0e-7)*cj0);
IkReal x429=(cj1*r02);
IkReal x430=((5.0e-8)*cj1);
IkReal x431=((1.0e-7)*px);
IkReal x432=((1.0e-7)*sj0);
IkReal x433=((0.166)*sj0);
IkReal x434=(r02*sj0);
IkReal x435=((1.0e-7)*pz);
IkReal x436=(cj0*sj1);
IkReal x437=((5.0e-8)*sj1);
IkReal x438=(py*r01);
IkReal x439=(cj0*cj1);
IkReal x440=(cj1*pz);
IkReal x441=((8.3e-9)*sj1);
IkReal x442=(pz*sj1);
IkReal x443=((2.0)*pz);
IkReal x444=((5.0e-15)*cj1);
IkReal x445=(py*r02);
IkReal x446=((0.166)*pz);
IkReal x447=((0.006889)*cj1);
IkReal x448=((0.01507759999994)*x402);
IkReal x449=((6.028e-8)*x401);
IkReal x450=(r02*x411);
IkReal x451=((1.0e-7)*x438);
IkReal x452=(r02*x435);
IkReal x453=(px*x413);
IkReal x454=(cj2*x401);
IkReal x455=(sj2*x402);
IkReal x456=(cj1*x408);
IkReal x457=(cj2*x402);
IkReal x458=(sj2*x401);
IkReal x459=((1.0)*x408);
IkReal x460=((1.0)*x407);
IkReal x461=(sj1*x409);
IkReal x462=((1.0)*x409);
IkReal x463=(cj1*x407);
IkReal x464=((0.0802)*x454);
IkReal x465=((0.0802)*x455);
IkReal x466=((1.5e-7)*x457);
IkReal x467=((1.5e-7)*x458);
IkReal x468=((1.5e-7)*x454);
IkReal x469=((1.5e-7)*x455);
IkReal x470=((0.0802)*x458);
IkReal x471=((0.0802)*x457);
IkReal x472=(x423*x431);
IkReal x473=(x418*x441);
IkReal x474=(x413*x425);
IkReal x475=(x412*x441);
IkReal x476=(px*x415*x434);
IkReal x477=(cj0*x414*x415);
IkReal x478=((1.0e-7)*x410*x422);
IkReal x479=(sj0*x413*x442);
IkReal x480=(x404+x467);
IkReal x481=(x405+x406+x471);
IkReal x482=(x469+x468+x470);
IkReal x483=(x474+x478+x479);
IkReal x484=(x476+x477+x472);
IkReal x485=(x403+x466+x465+x464);
IkReal x486=(x452+x453+x451+x475+x473);
evalcond[0]=((5.0e-8)+((px*x439))+(((-1.0)*x485))+x480+x442+((sj0*x425)));
evalcond[1]=((-0.083)+(((-1.0)*x481))+x482+x440+(((-1.0)*x417*x436))+(((-1.0)*sj0*x410)));
evalcond[2]=((0.0083790400000624)+(((-1.0)*x410*x433))+(((-1.0)*x449))+(((-1.0)*x421*x436))+(((-1.0)*x460))+(((-1.0)*x462))+(((-1.0)*cj1*px*x428))+(((-1.0)*x459))+(((-1.0)*sj0*x431))+((py*x428))+x448+(((0.166)*x440))+(((-1.0)*x425*x432))+(((-1.0)*pz*x415)));
evalcond[3]=((((-5.0e-8)*x420))+((x424*x442))+(((-1.0)*sj0*x416*x417))+(((-1.0)*x480))+(((5.0e-8)*x424))+((x410*x422))+(((-1.0)*x414*x436))+(((-5.0e-8)*x416))+((r00*x425))+x485+(((-1.0)*x417*x423))+(((-1.0)*x418*x430))+(((-1.0)*x412*x430)));
evalcond[4]=((((-1.0)*x424*x440))+((x414*x439))+(((-1.0)*x481))+(((5.0e-8)*x429))+((px*sj0*x429))+(((-1.0)*x422*x425))+((r00*x410))+x482+(((-1.0)*x417*x427))+(((-0.083)*x420))+(((0.083)*x424))+(((-1.0)*x418*x437))+(((-1.0)*x412*x437)));
evalcond[5]=((0.0152680400000576)+((py*x412*x426))+(((-1.0)*x449))+(((-0.006889)*x420))+(((-1.0)*x421*x427))+(((-1.0)*x424*x462))+(((-1.0)*x484))+(((-1.0)*x486))+(((-1.0)*pz*x426*x434))+(((-0.166)*x424*x440))+(((-0.166)*x422*x425))+(((0.166)*r00*x410))+((x408*x420))+((x408*x424))+((x407*x424))+x483+x448+x450+(((0.006889)*x424))+((sj0*x421*x429))+(((0.166)*x414*x439))+((py*x422*x443))+(((-1.0)*x420*x462))+(((-1.0)*x420*x460))+(((-5.0e-15)*x416))+(((-1.0)*py*x418*x426))+(((-1.0)*x412*x444))+(((-1.0)*x418*x444)));
evalcond[6]=((((-1.0)*r00*x426*x442))+(((-1.0)*x425*x434*x443))+(((-2.0)*x410*x414))+(((-1.0)*x483))+(((-1.0)*x486))+((x418*x463))+((x412*x463))+((x412*x456))+(((-1.0)*x420*x425*x426))+((x408*x416))+(((-1.0)*cj1*x412*x462))+(((0.006889)*x416))+((x412*x447))+((x409*x416))+(((2.1e-14)*x458))+(((-1.0)*x424*x425*x426))+x484+x450+((x418*x447))+(((-1.0)*x414*x433))+(((-1.0)*x422*x426*x440))+(((5.0e-15)*x420))+(((2.8e-14)*cj2))+(((-5.0e-15)*x424))+(((-1.0)*x418*x456))+(((-1.0)*x416*x460))+((cj1*x409*x418))+(((-1.0)*x412*x446))+((x433*x445))+(((-1.1228e-8)*x455))+(((-1.1228e-8)*x454))+(((-1.316e-8)*sj2))+((x421*x422))+(((-2.1e-14)*x457)));
evalcond[7]=((((-1.0)*r00*x426*x440))+(((-1.0)*sj1*x412*x460))+((sj1*x408*x418))+(((-2.0)*x414*x425))+((r02*x446))+(((1.1228e-8)*x458))+((x411*x418))+((x411*x412))+((x412*x461))+((x410*x413))+(((-1.0e-7)*x422*x425))+((cj0*pz*x416*x426))+(((8.3e-9)*x424))+(((-0.006888999999995)*x429))+((x410*x434*x443))+((x409*x429))+((x408*x429))+((x410*x424*x426))+(((2.1e-14)*x454))+(((2.1e-14)*x455))+((r00*x421))+((sj0*x429*x431))+(((-1.0)*x414*x432))+(((-1.0)*sj1*x418*x460))+((x410*x420*x426))+(((0.166)*x438))+((x412*x419))+(((-1.316e-8)*cj2))+((x418*x419))+((cj1*x414*x428))+(((-1.0)*x418*x461))+(((-1.0)*px*r01*x415))+(((8.3e-9)*x416))+(((-1.0)*x429*x460))+(((-2.8e-14)*sj2))+(((-1.0)*x412*x435))+(((-1.1228e-8)*x457))+(((-1.0)*sj0*x413*x440))+(((-8.3e-9)*x420))+(((-1.0)*sj1*x412*x459))+((x432*x445))+((x422*x431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x487=(cj1*cj2);
IkReal x488=(cj0*r00);
IkReal x489=(r02*sj2);
IkReal x490=(cj2*sj1);
IkReal x491=(r01*sj0);
IkReal x492=(sj2*x491);
CheckValue<IkReal> x493=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x493.valid){
continue;
}
CheckValue<IkReal> x494 = IKatan2WithCheck(IkReal((((sj1*sj2*x488))+(((-1.0)*cj1*x489))+((r02*x490))+((sj1*x492))+((x487*x491))+((x487*x488)))),IkReal((((cj1*sj2*x488))+((r02*x487))+(((-1.0)*x488*x490))+((sj1*x489))+((cj1*x492))+(((-1.0)*x490*x491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x494.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x493.value)))+(x494.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x495=IKsin(j3);
IkReal x496=IKcos(j3);
IkReal x497=pz*pz;
IkReal x498=py*py;
IkReal x499=px*px;
IkReal x500=(py*sj1);
IkReal x501=(cj1*r00);
IkReal x502=((8.3e-9)*cj0);
IkReal x503=(cj1*r01);
IkReal x504=((1.0e-7)*r00);
IkReal x505=(sj2*sj4);
IkReal x506=(pz*r01);
IkReal x507=((1.0e-7)*sj1);
IkReal x508=(cj2*sj4);
IkReal x509=(r02*sj1);
IkReal x510=((1.0)*px);
IkReal x511=(r00*sj0);
IkReal x512=(cj0*r01);
IkReal x513=((0.166)*px);
IkReal x514=(cj0*r02);
IkReal x515=((2.0)*sj0);
IkReal x516=(pz*r02);
IkReal x517=((7.0e-8)*sj2);
IkReal x518=(px*py);
IkReal x519=(r01*sj1);
IkReal x520=((8.3e-9)*sj0);
IkReal x521=((0.166)*r00);
IkReal x522=((1.0e-7)*py);
IkReal x523=(cj1*r02);
IkReal x524=((5.0e-8)*sj0);
IkReal x525=((1.0e-7)*px);
IkReal x526=((1.0e-7)*sj0);
IkReal x527=((0.166)*sj0);
IkReal x528=(r02*sj0);
IkReal x529=(cj0*pz);
IkReal x530=(cj0*sj1);
IkReal x531=((0.01507760000006)*cj4);
IkReal x532=((2.0)*pz);
IkReal x533=((1.0)*sj0);
IkReal x534=((2.0)*px);
IkReal x535=(py*r01);
IkReal x536=(cj0*cj1);
IkReal x537=((0.083)*sj0);
IkReal x538=((1.0)*py);
IkReal x539=((7.0e-8)*cj2);
IkReal x540=((3.88e-9)*cj4);
IkReal x541=(cj1*pz);
IkReal x542=(cj1*sj0);
IkReal x543=((1.0)*cj2);
IkReal x544=(cj1*py);
IkReal x545=(pz*sj1);
IkReal x546=((2.0)*cj0);
IkReal x547=(r00*sj1);
IkReal x548=((5.0e-8)*x511);
IkReal x549=((5.0e-8)*x512);
IkReal x550=((5.0e-8)*x509);
IkReal x551=((5.0e-8)*x523);
IkReal x552=((8.3e-9)*x523);
IkReal x553=(r01*x522);
IkReal x554=((1.0e-7)*x516);
IkReal x555=(px*x504);
IkReal x556=((6.028e-8)*x495);
IkReal x557=(sj0*x497);
IkReal x558=((1.5e-7)*x495);
IkReal x559=((0.01507759999994)*x496);
IkReal x560=(cj4*x495);
IkReal x561=((2.1e-14)*x496);
IkReal x562=(cj4*x496);
IkReal x563=((2.1e-14)*x495);
IkReal x564=((1.0)*x499);
IkReal x565=((0.0802)*x496);
IkReal x566=((0.0802)*x495);
IkReal x567=((1.0)*x498);
IkReal x568=((1.5e-7)*x496);
IkReal x569=((1.0)*x497);
IkReal x570=((1.1228e-8)*x495);
IkReal x571=((1.1228e-8)*x496);
IkReal x572=(x503*x524);
IkReal x573=((5.0e-8)*cj0*x501);
IkReal x574=(x519*x524);
IkReal x575=((5.0e-8)*r00*x530);
IkReal x576=(x503*x525);
IkReal x577=(x519*x520);
IkReal x578=(x501*x522);
IkReal x579=(x502*x547);
IkReal x580=((0.0152680399999326)*x562);
IkReal x581=(px*x507*x528);
IkReal x582=(cj0*x506*x507);
IkReal x583=((1.0e-7)*x500*x514);
IkReal x584=(sj0*x504*x545);
IkReal x585=(x575+x574);
IkReal x586=(x550+x573+x572);
IkReal x587=(x578+x583+x584);
IkReal x588=(x576+x581+x582);
IkReal x589=(x553+x555+x554+x579+x577);
evalcond[0]=((((-1.0)*x543*x560))+((sj0*x503))+x509+((cj0*x501))+(((-1.0)*sj2*x562)));
evalcond[1]=((((-1.0)*x543*x562))+x523+(((-1.0)*r00*x530))+((sj2*x560))+(((-1.0)*x519*x533)));
evalcond[2]=((5.0e-8)+((py*x542))+(((-0.094)*sj2))+(((2.0e-7)*cj2))+((sj2*x558))+((px*x536))+x545+(((-1.0)*sj2*x565))+(((-1.0)*cj2*x566))+(((-1.0)*cj2*x568)));
evalcond[3]=((-0.083)+(((-1.0)*x500*x533))+(((-2.0e-7)*sj2))+(((-0.094)*cj2))+x541+(((-1.0)*x510*x530))+((cj2*x558))+((sj2*x568))+((sj2*x566))+(((-1.0)*cj2*x565)));
evalcond[4]=((0.0083790400000624)+(((-1.0)*sj0*x525))+(((-1.0)*pz*x507))+(((-1.0)*x500*x527))+(((-1.0)*x525*x536))+((cj0*x522))+(((-1.0)*x556))+(((0.166)*x541))+x559+(((-1.0)*x513*x530))+(((-1.0)*x522*x542))+(((-1.0)*x564))+(((-1.0)*x567))+(((-1.0)*x569)));
evalcond[5]=(((sj0*x506))+(((-0.083)*x509))+(((-1.0)*x503*x537))+(((-1.0)*x528*x538))+(((-1.0)*x551))+(((-0.094)*x560))+x585+(((-2.0e-7)*x562))+(((-0.083)*cj0*x501))+(((1.5e-7)*cj4))+(((-1.0)*x510*x514))+((r00*x529)));
evalcond[6]=((((-1.0)*r00*x510))+(((-1.0)*x535))+(((-0.083)*r00*x530))+(((-1.0)*x516))+(((0.094)*x562))+(((-1.0)*x548))+(((7.0e-8)*sj4))+(((0.0802)*cj4))+x549+(((-2.0e-7)*x560))+(((0.083)*x523))+(((-1.0)*x586))+(((-1.0)*x519*x537)));
evalcond[7]=(((x505*x558))+(((-1.0)*x508*x566))+(((-1.0)*x508*x568))+(((-1.0)*x503*x510))+(((2.0e-7)*x508))+((x539*x560))+(((-1.0)*x549))+((x500*x514))+x548+(((-1.0)*x506*x530))+(((-0.094)*x505))+((x517*x562))+((py*x501))+(((-1.0)*x586))+((x511*x545))+(((-1.0)*sj0*x509*x510))+(((-1.0)*x505*x565)));
evalcond[8]=((((-1.0)*x539*x562))+(((0.094)*x508))+((x508*x565))+(((-1.0)*cj1*x514*x538))+(((2.0e-7)*x505))+((px*sj0*x523))+(((-1.0)*pz*x501*x533))+((x503*x529))+(((-1.0)*x508*x558))+((r00*x500))+(((0.083)*x511))+x551+((x517*x560))+(((-1.0)*x585))+(((-1.0)*x510*x519))+(((-0.083)*x512))+(((-1.0)*x505*x568))+(((-1.0)*x505*x566)));
evalcond[9]=((((-2.8e-14)*x560))+((sj4*x556))+(((-0.0152680400000576)*sj4))+(((-1.0)*x512*x569))+(((-1.0)*x512*x564))+(((1.316e-8)*x562))+((x500*x521))+(((-0.006889)*x512))+((x498*x512))+((x498*x511))+(((-0.166)*x514*x544))+((py*x514*x532))+(((-1.0)*x513*x519))+(((0.166)*x503*x529))+((sj0*x513*x523))+(((-1.0)*sj4*x559))+(((-5.0e-15)*x509))+(((-1.0)*pz*x501*x527))+(((-5.0e-15)*cj0*x501))+x552+x587+((x497*x511))+(((1.1228e-8)*cj4))+((r00*x518*x546))+(((-1.0)*x511*x564))+(((-1.0)*px*x515*x516))+(((-5.0e-15)*sj0*x503))+(((-1.0)*x589))+(((-1.0)*x588))+(((-1.0)*r01*x515*x518))+(((0.006889)*x511)));
evalcond[10]=(((x522*x528))+(((-1.0)*x523*x569))+((r00*x499*x530))+((x500*x504))+(((0.006888999999995)*sj0*x519))+(((-1.0)*px*r01*x507))+((x500*x512*x534))+(((-1.0)*px*x501*x532))+(((-1.0)*x508*x563))+(((8.3e-9)*x509))+(((-1.0)*cj1*x514*x522))+(((1.354e-8)*sj2*x562))+((sj0*x523*x525))+(((-0.006888999999995)*x523))+(((-1.0)*py*x503*x532))+(((-1.0)*x504*x529))+((sj2*x540))+(((1.316e-8)*x508))+(((-1.0)*x506*x526))+((sj0*x498*x519))+(((0.166)*x535))+((x503*x520))+(((-1.0)*r01*x502))+((x501*x502))+(((-1.0)*pz*x501*x526))+((x500*x511*x534))+(((2.8e-14)*x505))+(((0.166)*x516))+(((0.0024039599999874)*sj2*x560))+(((1.0e-7)*x503*x529))+((x514*x525))+((x499*x523))+((x508*x571))+(((-1.0)*r00*x530*x569))+(((-1.0)*r00*x530*x567))+((cj2*x531))+(((8.3e-9)*x511))+((x498*x523))+(((0.006888999999995)*r00*x530))+((cj2*x580))+(((-1.0)*x499*x519*x533))+((x509*x529*x534))+(((-1.0)*x497*x519*x533))+(((-1.0)*x505*x570))+((x500*x515*x516))+(((-6.166e-8)*cj2*x560))+((r00*x513))+(((-1.0)*x505*x561)));
evalcond[11]=((((-1.0)*px*x532*x547))+((cj0*x497*x501))+(((-1.0)*x509*x569))+(((-5.0e-15)*x511))+(((0.006889)*sj0*x503))+(((-1.0)*x498*x503*x533))+((x508*x561))+((sj0*x499*x503))+((sj2*x531))+(((-1.0)*x521*x529))+((sj2*x580))+(((-1.0)*cj2*x540))+((x503*x557))+(((-6.166e-8)*sj2*x560))+((cj0*x498*x501))+(((0.006889)*x509))+(((-1.0)*x515*x516*x544))+(((-1.0)*x501*x515*x518))+(((1.316e-8)*x505))+((x513*x514))+(((-1.0)*x506*x527))+((py*r02*x527))+(((-0.0024039599999874)*cj2*x560))+((x498*x509))+x552+x588+(((0.006889)*cj0*x501))+((x505*x571))+(((-2.0)*x500*x506))+(((5.0e-15)*x512))+((x508*x570))+((x499*x509))+(((-1.0)*x589))+(((-1.0)*x587))+(((-2.8e-14)*x508))+(((-1.0)*cj1*px*x514*x532))+(((-1.354e-8)*cj2*x562))+(((-1.0)*cj0*x501*x564))+(((-1.0)*x503*x518*x546))+(((-1.0)*x505*x563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - crane_plus (8db6656fa312157d8555ef660a1afc7b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
